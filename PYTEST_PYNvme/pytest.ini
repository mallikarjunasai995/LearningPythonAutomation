[pytest]

python_files = test_*
#anything starts with test, we consider that as test function
python_functions = test_*
python_classes = *Tests


#can define Test paths / from folders only where we need to trigger
test_paths = PYTSET_PYNvme

; git add -- :!DT_Automation/*


#configuration options - pytest.ini
; takes precendence over other files

; adopts = --maxfail=2



#marking test function for test searching and execute those tests
#smoke,regression tests - add another layer of marker
#and , or -- mix and match of exectuing the test cases by passing theyse keywords to 
#pytest argument

# Fixtures 
# enable us to define setup and teardown tasks along with other helpful testing functions in one place 
; rather than copy and pasting the same code to many places

; 

#------test stages---------
# Arrange
# Act
# Assert
# Cleanup
#pytest report generation -pytest-html plugin need to install to genearte html reports 
#pycache - helps us to run tests faster if files already compiled and no changes once the test executed

#skip,mark,options
; @pytest.mark.skip
; @pytest.mark.skipif
#mark - pytest -m strings - will run all the functions which marked as strings
#mark can be used along with and , or operations

#need to define markes in pytest.ini folders
; @pytest.mark.xfail  - expected to fail

; pytest -v -m -k == k is a substring of module name or file name whether to run or not
; -tb = no == traceback no 

#pytest command line options
; --lf = last fail


; conftest.py - uses to share fixtuers across the modules , files in python project
#how to know which fixture has executed by calling our test funcitons
    ; pytest -k -v tesfixutre03 --setup-show
    ; SETUP -M setup01
    ; SETUP -F setup02

#scope of the fixture === (scope = "module","function" , "package" -- init.py , "class")



#builtinfixture -- request

; -s will print the statemns inside fixture fucntion 
; also check this link for capture information of stdin/sterr - 
; https://pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html

#commandoptions - cmdopt 
; pytest -v --cmdopt=Prod -s


#pytest-BDD 
#@given,@when,@then - when is the main code
#target_fixture - will be available across all the tests

